//////////////////////////////
//Main Backup Table
//////////////////////////////

let
  Source = AzureResourceGraph.Query("RecoveryServicesResources", null, null, null, [resultTruncated = true]),
  #"isempty" = if Table.HasColumns(Source, "Results") then #table({"id", "name", "type", "tenantId", "kind", "location", "resourceGroup", "subscriptionId", "managedBy", "sku", "plan", "properties", "tags", "identity", "zones", "extendedLocation"}, {}) else Source,
  #"Transform columns" = Table.TransformColumnTypes(#"isempty", {{"id", type text}, {"name", type text}, {"type", type text}, {"tenantId", type text}, {"kind", type text}, {"location", type text}, {"resourceGroup", type text}, {"subscriptionId", type text}, {"managedBy", type text}, {"sku", type any}, {"plan", type any}, {"properties", type any}, {"tags", type any}, {"identity", type any}, {"zones", type any}, {"extendedLocation", type any}}),
  #"Removed columns" = Table.RemoveColumns(#"Transform columns", {"tags"}),
  #"Expanded properties" = Table.ExpandRecordColumn(#"Removed columns", "properties", {"primaryRegionProtectionDetails", "sourceSideScanInfo", "solutionSpecificProtectionProperties", "protectionStatusInSecondaryRegion", "distinctBcdrSolutionProviderNames", "protectionStatusInPrimaryRegion", "isProtectedInSecondaryRegion", "isProtectedInPrimaryRegion", "friendlyName", "linkedResourceInformation", "deletedPiLastEventTimeMap", "maximumBcdrDataSecurity", "distinctSolutionNames", "dataSourceInformation", "upiSchemaVersion", "protectedItems", "tenantId"}, {"properties.primaryRegionProtectionDetails", "properties.sourceSideScanInfo", "properties.solutionSpecificProtectionProperties", "properties.protectionStatusInSecondaryRegion", "properties.distinctBcdrSolutionProviderNames", "properties.protectionStatusInPrimaryRegion", "properties.isProtectedInSecondaryRegion", "properties.isProtectedInPrimaryRegion", "properties.friendlyName", "properties.linkedResourceInformation", "properties.deletedPiLastEventTimeMap", "properties.maximumBcdrDataSecurity", "properties.distinctSolutionNames", "properties.dataSourceInformation", "properties.upiSchemaVersion", "properties.protectedItems", "properties.tenantId"}),
  #"Removed columns 1" = Table.RemoveColumns(#"Expanded properties", {"properties.sourceSideScanInfo", "properties.solutionSpecificProtectionProperties"}),
  #"Reordered columns" = Table.ReorderColumns(#"Removed columns 1", {"id", "name", "type", "tenantId", "kind", "location", "resourceGroup", "subscriptionId", "managedBy", "sku", "plan", "properties.protectionStatusInPrimaryRegion", "properties.protectionStatusInSecondaryRegion", "properties.primaryRegionProtectionDetails", "properties.distinctBcdrSolutionProviderNames", "properties.isProtectedInSecondaryRegion", "properties.isProtectedInPrimaryRegion", "properties.friendlyName", "properties.linkedResourceInformation", "properties.deletedPiLastEventTimeMap", "properties.maximumBcdrDataSecurity", "properties.distinctSolutionNames", "properties.dataSourceInformation", "properties.upiSchemaVersion", "properties.protectedItems", "properties.tenantId", "identity", "zones", "extendedLocation"}),
  #"Expanded properties.primaryRegionProtectionDetails" = Table.ExpandRecordColumn(#"Reordered columns", "properties.primaryRegionProtectionDetails", {"oldestRecoveryPoint", "configuredRpoInMinutes", "latestRecoveryPoint", "maximumConfiguredRetentionInDays", "minimumConfiguredRetentionInDays"}, {"properties.primaryRegionProtectionDetails.oldestRecoveryPoint", "properties.primaryRegionProtectionDetails.configuredRpoInMinutes", "properties.primaryRegionProtectionDetails.latestRecoveryPoint", "properties.primaryRegionProtectionDetails.maximumConfiguredRetentionInDays", "properties.primaryRegionProtectionDetails.minimumConfiguredRetentionInDays"}),
  #"Expanded properties.primaryRegionProtectionDetails.oldestRecoveryPoint" = Table.ExpandRecordColumn(#"Expanded properties.primaryRegionProtectionDetails", "properties.primaryRegionProtectionDetails.oldestRecoveryPoint", {"propertyValue", "isAvailable"}, {"properties.primaryRegionProtectionDetails.oldestRecoveryPoint.propertyValue", "properties.primaryRegionProtectionDetails.oldestRecoveryPoint.isAvailable"}),
  #"Expanded properties.primaryRegionProtectionDetails.latestRecoveryPoint" = Table.ExpandRecordColumn(#"Expanded properties.primaryRegionProtectionDetails.oldestRecoveryPoint", "properties.primaryRegionProtectionDetails.latestRecoveryPoint", {"propertyValue", "isAvailable"}, {"properties.primaryRegionProtectionDetails.latestRecoveryPoint.propertyValue", "properties.primaryRegionProtectionDetails.latestRecoveryPoint.isAvailable"}),
  #"Removed columns 2" = Table.RemoveColumns(#"Expanded properties.primaryRegionProtectionDetails.latestRecoveryPoint", {"properties.primaryRegionProtectionDetails.oldestRecoveryPoint.propertyValue", "properties.primaryRegionProtectionDetails.oldestRecoveryPoint.isAvailable"}),
  #"Expanded properties.primaryRegionProtectionDetails.maximumConfiguredRetentionInD" = Table.ExpandRecordColumn(#"Removed columns 2", "properties.primaryRegionProtectionDetails.maximumConfiguredRetentionInDays", {"propertyValue", "isAvailable"}, {"properties.primaryRegionProtectionDetails.maximumConfiguredRetentionInDays.prope", "properties.primaryRegionProtectionDetails.maximumConfiguredRetentionInDays.isAva"}),
  #"Expanded properties.primaryRegionProtectionDetails.minimumConfiguredRetentionInD" = Table.ExpandRecordColumn(#"Expanded properties.primaryRegionProtectionDetails.maximumConfiguredRetentionInD", "properties.primaryRegionProtectionDetails.minimumConfiguredRetentionInDays", {"propertyValue", "isAvailable"}, {"properties.primaryRegionProtectionDetails.minimumConfiguredRetentionInDays.prope", "properties.primaryRegionProtectionDetails.minimumConfiguredRetentionInDays.isAva"}),
  #"Expanded properties.distinctBcdrSolutionProviderNames" = Table.ExpandListColumn(#"Expanded properties.primaryRegionProtectionDetails.minimumConfiguredRetentionInD", "properties.distinctBcdrSolutionProviderNames"),
  #"Expanded properties.linkedResourceInformation" = Table.ExpandRecordColumn(#"Expanded properties.distinctBcdrSolutionProviderNames", "properties.linkedResourceInformation", {"isAzureManagedLinkedResource", "resourceLocation", "linkedResourceType", "linkedResourceId", "clusterNodes", "clusterType", "clusterName", "isCluster"}, {"properties.linkedResourceInformation.isAzureManagedLinkedResource", "properties.linkedResourceInformation.resourceLocation", "properties.linkedResourceInformation.linkedResourceType", "properties.linkedResourceInformation.linkedResourceId", "properties.linkedResourceInformation.clusterNodes", "properties.linkedResourceInformation.clusterType", "properties.linkedResourceInformation.clusterName", "properties.linkedResourceInformation.isCluster"}),
  #"Removed columns 3" = Table.RemoveColumns(#"Expanded properties.linkedResourceInformation", {"properties.deletedPiLastEventTimeMap"}),
  #"Expanded properties.distinctSolutionNames" = Table.ExpandListColumn(#"Removed columns 3", "properties.distinctSolutionNames"),
  #"Removed columns 4" = Table.RemoveColumns(#"Expanded properties.distinctSolutionNames", {"properties.dataSourceInformation", "properties.protectedItems"}),
  #"Changed column type" = Table.TransformColumnTypes(#"Removed columns 4", {{"properties.primaryRegionProtectionDetails.latestRecoveryPoint.propertyValue", type datetime}}),
  #"Transform columns 1" = Table.TransformColumnTypes(#"Changed column type", {{"sku", type text}, {"plan", type text}, {"properties.protectionStatusInPrimaryRegion", type text}, {"properties.protectionStatusInSecondaryRegion", type text}, {"properties.primaryRegionProtectionDetails.configuredRpoInMinutes", type text}, {"properties.primaryRegionProtectionDetails.latestRecoveryPoint.isAvailable", type text}, {"properties.primaryRegionProtectionDetails.maximumConfiguredRetentionInDays.prope", type text}, {"properties.primaryRegionProtectionDetails.maximumConfiguredRetentionInDays.isAva", type text}, {"properties.primaryRegionProtectionDetails.minimumConfiguredRetentionInDays.prope", type text}, {"properties.primaryRegionProtectionDetails.minimumConfiguredRetentionInDays.isAva", type text}, {"properties.distinctBcdrSolutionProviderNames", type text}, {"properties.isProtectedInSecondaryRegion", type text}, {"properties.isProtectedInPrimaryRegion", type text}, {"properties.friendlyName", type text}, {"properties.linkedResourceInformation.isAzureManagedLinkedResource", type text}, {"properties.linkedResourceInformation.resourceLocation", type text}, {"properties.linkedResourceInformation.linkedResourceType", type text}, {"properties.linkedResourceInformation.linkedResourceId", type text}, {"properties.linkedResourceInformation.clusterNodes", type text}, {"properties.linkedResourceInformation.clusterType", type text}, {"properties.linkedResourceInformation.clusterName", type text}, {"properties.linkedResourceInformation.isCluster", type text}, {"properties.maximumBcdrDataSecurity", type text}, {"properties.distinctSolutionNames", type text}, {"properties.upiSchemaVersion", type text}, {"properties.tenantId", type text}, {"identity", type text}, {"zones", type text}, {"extendedLocation", type text}})
in
  #"Transform columns 1"

//////////////////////////////
// Backup Tags 
//////////////////////////////

let
  Source = AzureResourceGraph.Query("RecoveryServicesResources", null, null, null, [resultTruncated = true]),
  #"isempty" = if Table.HasColumns(Source, "Results") then #table({"id", "name", "type", "tenantId", "kind", "location", "resourceGroup", "subscriptionId", "managedBy", "sku", "plan", "properties", "tags", "identity", "zones", "extendedLocation"}, {}) else Source,
  #"Transform columns" = Table.TransformColumnTypes(#"isempty", {{"id", type text}, {"name", type text}, {"type", type text}, {"tenantId", type text}, {"kind", type text}, {"location", type text}, {"resourceGroup", type text}, {"subscriptionId", type text}, {"managedBy", type text}, {"sku", type any}, {"plan", type any}, {"properties", type any}, {"tags", type any}, {"identity", type any}, {"zones", type any}, {"extendedLocation", type any}}),
  #"Removed other columns" = Table.SelectColumns(#"Transform columns", {"id", "name", "tags"}),
  #"Expanded tags" = Table.ExpandRecordColumn(#"Removed other columns", "tags", {"Environment", "CostCenter", "Owner", "BusinessUnit", "Criticality", "CreatedBy", "ServiceClass", "ServiceName", "Env", "Cost Centre", "Terraform", "Approver", "DeployedBy", "DR", "ExpiryDate", "Control_plane", "OpsCommitment"}, {"tags.Environment", "tags.CostCenter", "tags.Owner", "tags.BusinessUnit", "tags.Criticality", "tags.CreatedBy", "tags.ServiceClass", "tags.ServiceName", "tags.Env", "tags.Cost Centre", "tags.Terraform", "tags.Approver", "tags.DeployedBy", "tags.DR", "tags.ExpiryDate", "tags.Control_plane", "tags.OpsCommitment"}),
  #"Transform columns 1" = Table.TransformColumnTypes(#"Expanded tags", {{"tags.Environment", type text}, {"tags.CostCenter", type text}, {"tags.Owner", type text}, {"tags.BusinessUnit", type text}, {"tags.Criticality", type text}, {"tags.CreatedBy", type text}, {"tags.ServiceClass", type text}, {"tags.ServiceName", type text}, {"tags.Env", type text}, {"tags.Cost Centre", type text}, {"tags.Terraform", type text}, {"tags.Approver", type text}, {"tags.DeployedBy", type text}, {"tags.DR", type text}, {"tags.ExpiryDate", type text}, {"tags.Control_plane", type text}, {"tags.OpsCommitment", type text}})
in
  #"Transform columns 1"


//////////////////////////////
// Backup Policies 
//////////////////////////////

let
  Source = AzureResourceGraph.Query("recoveryservicesresources #(lf)| where type =~ 'microsoft.recoveryservices/vaults/backuppolicies'#(lf)| project id, subscriptionId, type, tenantId, location, resourceGroup, properties, properties.protectedItemsCount, properties.backupManagementType, properties.workLoadType, policyFrequency = case(properties.backupManagementType =~ 'AzureWorkload','NA', properties.schedulePolicy.scheduleRunFrequency) #(lf)| where properties.protectedItemsCount > 0 // and properties.workLoadType == 'VM' //Removes the databases (that will be on a vm) and the storage accounts #(lf)| project id, subscriptionId, type, tenantId, location, resourceGroup, protectedItemsCount = properties.protectedItemsCount, backupMgmtType = properties.backupManagementType , policyFrequency, properties.subProtectionPolicy.schedulePolicy", null, null, null, [resultTruncated = true]),
  #"isempty" = if Table.HasColumns(Source, "Results") then #table({"id", "subscriptionId", "type", "tenantId", "location", "resourceGroup", "properties_protectedItemsCount", "properties_backupManagementType", "properties_workLoadType", "policyFrequency"}, {}) else Source,
  #"Transform columns" = Table.TransformColumnTypes(#"isempty", {{"id", type text}, {"subscriptionId", type text}, {"type", type text}, {"tenantId", type text}, {"location", type text}, {"resourceGroup", type text}, {"properties_protectedItemsCount", type text}, {"properties_backupManagementType", type text}, {"properties_workLoadType", type text}, {"policyFrequency", type text}})
in
  #"Transform columns"

//////////////////////////////
// Backup Jobs 
//////////////////////////////

let
  Source = AzureResourceGraph.Query("recoveryservicesresources#(lf)| where type in~ ('microsoft.recoveryservices/vaults/backupjobs')  #(lf)| extend vaultName = case(type =~ 'microsoft.dataprotection/backupVaults/backupJobs',properties.vaultName,type =~ 'Microsoft.RecoveryServices/vaults/backupJobs',split(split(id, '/Microsoft.RecoveryServices/vaults/')[1],'/')[0],'--') #(lf)| extend friendlyName = case(type =~ 'microsoft.dataprotection/backupVaults/backupJobs',strcat(properties.dataSourceSetName , '/', properties.dataSourceName),type =~ 'Microsoft.RecoveryServices/vaults/backupJobs', properties.entityFriendlyName, '--')  #(lf)| extend dataSourceType = case(type =~ 'Microsoft.RecoveryServices/vaults/backupJobs',properties.backupManagementType,type =~ 'microsoft.dataprotection/backupVaults/backupJobs',properties.dataSourceType,'--')  #(lf)| extend protectedItemName = split(split(properties.backupInstanceId, 'protectedItems')[1],'/')[1]  #(lf)| extend vaultId = tostring(split(id, '/backupJobs')[0])  #(lf)| extend vaultSub = tostring( split(id, '/')[2])  #(lf)| extend jobStatus = properties.status, operation = case(type =~ 'microsoft.dataprotection/backupVaults/backupJobs' and tolower(properties.operationCategory) =~ 'backup' and properties.isUserTriggered == 'true',strcat('adhoc',properties.operationCategory),type =~ 'microsoft.dataprotection/backupVaults/backupJobs', tolower(properties.operationCategory), type =~ 'Microsoft.RecoveryServices/vaults/backupJobs' and tolower(properties.operation) =~ 'backup' and properties.isUserTriggered == 'true',strcat('adhoc',properties.operation),type =~ 'Microsoft.RecoveryServices/vaults/backupJobs',tolower(properties.operation), '--'),startTime = todatetime(properties.startTime),endTime = properties.endTime, duration = properties.duration   #(lf)| where startTime >= ago(7d) #(lf)| project id, type, tenantId, location, resourceGroup, subscriptionId, vaultName, friendlyName, dataSourceType, protectedItemName, jobStatus, startTime, endTime, operation", null, null, null, [resultTruncated = true]),
  #"isempty" = if Table.HasColumns(Source, "Results") then #table({"id", "type", "tenantId", "location", "resourceGroup", "subscriptionId", "vaultName", "friendlyName", "dataSourceType", "protectedItemName", "jobStatus", "startTime", "endTime", "operation"}, {}) else Source,
  #"Changed column type" = Table.TransformColumnTypes(isempty, {{"startTime", type datetimezone}, {"endTime", type datetimezone}})
in
  #"Changed column type"
