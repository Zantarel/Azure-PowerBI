let
  Source = AzureResourceGraph.Query("policyresources#(lf)| where type =~ ""microsoft.authorization/policyexemptions""#(lf)| extend displayName = tostring(properties.displayName), category = tostring(properties.exemptionCategory), policyAssignmentId = tostring(properties.policyAssignmentId), scope = tostring(properties.scope), expiresOn = todatetime(properties.expiresOn), assignedBy = tostring(properties.assignedBy), justification = tostring(properties.metadata.justification), ticketId = tostring(properties.metadata.ticketId), createdOn = todatetime(properties.createdOn), updatedOn = todatetime(properties.updatedOn), description = tostring(properties.description)#(lf)| extend daysToExpire = case (isnull(expiresOn), real(null), toreal((expiresOn-now()) / 1d))#(lf)| extend exemptionMG = iff(id has ""/providers/Microsoft.Management/managementGroups/"",  extract(@""/managementGroups/([^/]+)"", 1, id), """")#(lf)| extend exemptionSub = iff(id has ""/subscriptions/"",extract(@""/subscriptions/([0-9a-fA-F-]+)"", 1, id),"""")#(lf)| extend assignmentMG = iff(policyAssignmentId has ""/providers/Microsoft.Management/managementGroups/"",extract(@""/managementGroups/([^/]+)"", 1, policyAssignmentId),"""")#(lf)| extend assignmentSub = iff(policyAssignmentId has ""/subscriptions/"",extract(@""/subscriptions/([0-9a-fA-F-]+)"", 1, policyAssignmentId),"""")#(lf)| extend managementGroup = coalesce(exemptionMG, assignmentMG, """")#(lf)| extend subscription = coalesce(exemptionSub, subscriptionId, assignmentSub, """")#(lf)| extend scopeCategory = case(isnotempty(subscription), ""Subscription"", isnotempty(managementGroup), ""Management Group"",    ""Unknown"")#(lf)| join kind=inner (resourcecontainers | where type == ""microsoft.resources/subscriptions"" | project subscriptionId, subscriptionName = name) on subscriptionId", "Tenant", null, null, [resultTruncated = false]),
  #"Removed columns" = Table.RemoveColumns(Source, {"sku", "plan", "tags", "identity", "zones", "extendedLocation", "exemptionMG", "assignmentSub", "assignmentMG", "exemptionSub", "subscriptionId1"}),
  #"Reordered columns" = Table.ReorderColumns(#"Removed columns", {"id", "tenantId", "subscriptionName", "subscriptionId", "managementGroup", "name", "displayName", "category", "location", "resourceGroup", "managedBy", "properties", "policyAssignmentId", "scope", "assignedBy", "justification", "ticketId", "createdOn", "expiresOn", "updatedOn", "description", "daysToExpire", "subscription", "scopeCategory", "type", "kind"}),
  #"Transform columns" = Table.TransformColumnTypes(#"Reordered columns", {{"id", type text}, {"tenantId", type text}, {"subscriptionName", type text}, {"subscriptionId", type text}, {"managementGroup", type text}, {"name", type text}, {"displayName", type text}, {"category", type text}, {"location", type text}, {"resourceGroup", type text}, {"managedBy", type text}, {"properties", type text}, {"policyAssignmentId", type text}, {"scope", type text}, {"assignedBy", type text}, {"justification", type text}, {"ticketId", type text}, {"createdOn", type text}, {"expiresOn", type text}, {"updatedOn", type text}, {"description", type text}, {"daysToExpire", type text}, {"subscription", type text}, {"scopeCategory", type text}, {"type", type text}, {"kind", type text}}),
  #"Replace errors" = Table.ReplaceErrorValues(#"Transform columns", {{"id", null}, {"tenantId", null}, {"subscriptionName", null}, {"subscriptionId", null}, {"managementGroup", null}, {"name", null}, {"displayName", null}, {"category", null}, {"location", null}, {"resourceGroup", null}, {"managedBy", null}, {"properties", null}, {"policyAssignmentId", null}, {"scope", null}, {"assignedBy", null}, {"justification", null}, {"ticketId", null}, {"createdOn", null}, {"expiresOn", null}, {"updatedOn", null}, {"description", null}, {"daysToExpire", null}, {"subscription", null}, {"scopeCategory", null}, {"type", null}, {"kind", null}})
in
  #"Replace errors"
