//////////////////////////////
// VM Resources  
//////////////////////////////

let
  Source = AzureResourceGraph.Query("resources | where (type =~ 'microsoft.hybridcompute/machines' and kind =~ 'AVS') or type in~ ('microsoft.Network/LoadBalancers', 'microsoft.Sql/managedInstances', 'microsoft.Network/azureFirewalls', 'microsoft.Network/applicationGateways', 'microsoft.compute/virtualmachines', 'microsoft.sql/servers')| extend os = case(properties.storageProfile.osDisk.osType =~ 'Windows' or properties.osProfile.osType =~ 'Windows', 'Windows', properties.storageProfile.osDisk.osType =~ 'Linux' or properties.osProfile.osType =~ 'Linux', 'Linux', '-') | project id, name, tenantId, location, type, resourceGroup, subscriptionId, managedBy, timeCreated = iff(isnotempty(todatetime(properties.timeCreated)), format_datetime(todatetime(properties.timeCreated),'yyyy-MM-dd HH:mm:ss'), '-'), licenseType=case( properties.licenseType =~ 'Windows_Server', 'Azure Hybrid Benefit for Windows', properties.licenseType =~ 'Windows_Client', 'Windows client with multi-tenant hosting', properties.licenseType =~ 'RHEL_BYOS', 'Azure Hybrid Benefit for Redhat', properties.licenseType =~ 'SLES_BYOS', 'Azure Hybrid Benefit for SUSE', 'Not enabled' ), os,#(lf)        host = coalesce(extract('/hosts/(.*)', 1, tostring(properties.host.id)), '-'),#(lf)        availabilitySet = coalesce(extract('/availabilitySets/(.*)', 1, tostring(properties.availabilitySet.id)), '-'),#(lf)        vmSize = coalesce(tostring(properties.hardwareProfile.vmSize), '-'),#(lf)        computerName = coalesce(tostring(properties.extended.instanceView.computerName), tostring(properties.osProfile.computerName), '-'),#(lf)        hyperVGeneration = coalesce(tostring(properties.extended.instanceView.hyperVGeneration), '-'),#(lf)        securityType = case(#(lf)            isnull(properties.securityProfile.securityType) or (properties.securityProfile.securityType =~ 'Standard'), 'Standard',#(lf)            properties.securityProfile.securityType =~ 'TrustedLaunch', 'Trusted launch',#(lf)            properties.securityProfile.securityType =~ 'ConfidentialVm', 'Confidential',#(lf)            '-'#(lf)        ),#(lf)        powerState = coalesce(properties.powerState, properties.status.powerState, tostring(split(tolower(properties.extended.instanceView.powerState.code), 'powerstate/')[1])),#(lf)        provisioningState = tostring(properties.provisioningState),#(lf)        hibernationState = tostring(split(tolower(properties.extended.instanceView.hibernationState.code), 'hibernationstate/')[1]),#(lf)#(tab)#(tab)scaleSet = coalesce(extract('/virtualMachineScaleSets/(.*)', 1, tostring(properties.virtualMachineScaleSet.id)), '-'),#(lf)        imageId = tolower(coalesce(extract('(.*)/versions/', 1, tostring(properties.storageProfile.imageReference.id)), tostring(properties.storageProfile.imageReference.id)))", null, null, null, [resultTruncated = true]),
  #"if empty" = if Table.HasColumns(Source, "Results") then #table({"id", "name", "tenantId", "location", "type", "resourceGroup", "subscriptionId", "managedBy", "timeCreated", "licenseType", "os", "host", "availabilitySet", "vmSize", "computerName", "hyperVGeneration", "securityType", "powerState", "hibernationState", "scaleSet", "imageId", "provisioningState"}, {}) else Source,
  #"Transform columns" = Table.TransformColumnTypes(#"if empty", {{"id", type text}, {"name", type text}, {"tenantId", type text}, {"location", type text}, {"resourceGroup", type text}, {"subscriptionId", type text}, {"managedBy", type text}}),
  #"Renamed columns" = Table.RenameColumns(#"Transform columns", {{"name", "resourceName"}}),
  #"Transform columns 1" = Table.TransformColumnTypes(#"Renamed columns", {{"timeCreated", type text}, {"licenseType", type text}, {"os", type text}, {"host", type text}, {"availabilitySet", type text}, {"vmSize", type text}, {"computerName", type text}, {"hyperVGeneration", type text}, {"securityType", type text}, {"powerState", type text}, {"provisioningState", type text}, {"hibernationState", type text}, {"scaleSet", type text}, {"imageId", type text}}),
    #"Added Custom" = Table.AddColumn(#"Transform columns 1", "timeCreated2", each if [timeCreated] = "-" then "" else [timeCreated]),
    #"Reordered Columns" = Table.ReorderColumns(#"Added Custom",{"id", "resourceName", "tenantId", "location", "type", "resourceGroup", "subscriptionId", "managedBy", "timeCreated", "timeCreated2", "licenseType", "os", "host", "availabilitySet", "vmSize", "computerName", "hyperVGeneration", "securityType", "powerState", "provisioningState", "hibernationState", "scaleSet", "imageId"}),
    #"Changed Type" = Table.TransformColumnTypes(#"Reordered Columns",{{"timeCreated2", type datetime}})
in
    #"Changed Type"

//////////////////////////////
// VM Resource Tags
//////////////////////////////

let
  Source = AzureResourceGraph.Query("resources | where type == 'microsoft.compute/virtualmachines' | project id, name, tags", null, null, null, [resultTruncated = true]),
  #"if empty" = if Table.HasColumns(Source, "Results") then #table({"id", "name", "tags"}, {}) else Source,
  #"Expanded tags" = Table.ExpandRecordColumn(#"if empty", "tags", {"Environment", "CostCenter", "CreatedBy", "Owner", "BusinessUnit", "Approver", "Criticality", "ServiceName", "Env", "Cost Centre", "OpsCommitment", "Terraform", "ServiceClass", "DR", "ExpiryDate"}, {"Environment", "CostCenter", "CreatedBy", "Owner", "BusinessUnit", "Approver", "Criticality", "ServiceName", "Env", "Cost Centre", "OpsCommitment", "Terraform", "ServiceClass", "DR", "ExpiryDate"}),
  #"Transform columns" = Table.TransformColumnTypes(#"Expanded tags", {{"id", type text}, {"name", type text}, {"Environment", type text}, {"CostCenter", type text}, {"CreatedBy", type text}, {"Owner", type text}, {"BusinessUnit", type text}, {"Approver", type text}, {"Criticality", type text}, {"ServiceName", type text}, {"Env", type text}, {"Cost Centre", type text}, {"OpsCommitment", type text}, {"Terraform", type text}, {"ServiceClass", type text}, {"DR", type text}, {"ExpiryDate", type text}})
in
  #"Transform columns"
