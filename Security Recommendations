//////////////////////////////
// Security Recommendations Main Table 
//////////////////////////////

let
  Source = AzureResourceGraph.Query("securityresources #(lf)        | where type =~ ""microsoft.security/assessments""#(lf)        | extend assessmentType = (#(lf)                iff(type == ""microsoft.security/assessments"", tostring(properties.metadata.assessmentType), dynamic(null)))#(lf)        | where ((type == ""microsoft.security/assessments"" and (assessmentType in~ (""BuiltIn"", ""CustomerManaged""))))#(lf)        | extend assessmentTypeSkimmed = (iff(type == ""microsoft.security/assessments"", case(tostring(properties.metadata.assessmentType) == ""BuiltIn"", ""BuiltIn"", tostring(properties.metadata.assessmentType) == ""BuiltInPolicy"", ""BuiltIn"", tostring(properties.metadata.assessmentType) == ""CustomPolicy"", ""Custom"", tostring(properties.metadata.assessmentType) == ""CustomerManaged"", ""Custom"", tostring(properties.metadata.assessmentType) == ""ManualCustomPolicy"", ""Custom"", tostring(properties.metadata.assessmentType) == ""ManualBuiltInPolicy"", ""BuiltIn"", dynamic(null)), dynamic(null)))#(lf)        | extend assessmentId = tolower(id)#(lf)        | extend assessmentKey = (iff(type == ""microsoft.security/assessments"", name, dynamic(null)))#(lf)        | extend source = (iff(type == ""microsoft.security/assessments"", trim(' ', tolower(coalesce(tostring(properties.resourceDetails.Source), tostring(properties.resourceDetails.source)))), dynamic(null)))#(lf)        | extend statusCode = (iff(type == ""microsoft.security/assessments"", tostring(properties.status.code), dynamic(null)))#(lf)        | extend resourceId = (iff(type == ""microsoft.security/assessments"", tolower(trim("" "", tostring(case(source =~ ""azure"", coalesce(properties.resourceDetails.Id, properties.resourceDetails.id),((type == ""microsoft.security/assessments"" and (source =~ ""aws"" and isnotempty(tostring(properties.resourceDetails.ConnectorId))))), coalesce(properties.resourceDetails.Id, properties.resourceDetails.id),((type == ""microsoft.security/assessments"" and (source =~ ""gcp"" and isnotempty(tostring(properties.resourceDetails.ConnectorId))))), coalesce(properties.resourceDetails.Id, properties.resourceDetails.id),source =~ ""aws"", properties.resourceDetails.AzureResourceId,#(lf)            source =~ ""gcp"", properties.resourceDetails.AzureResourceId,#(lf)            extract(""^(?i)(.+)/providers/Microsoft.Security/assessments/.+$"",1,id))))), dynamic(null)))#(lf)        | extend resourceName = (iff(type == ""microsoft.security/assessments"", tostring(coalesce(properties.resourceDetails.ResourceName, properties.resourceDetails.resourceName, properties.additionalData.CloudNativeResourceName, properties.additionalData.ResourceName, properties.additionalData.resourceName, split(resourceId, '/')[-1], extract(@""(.+)/(.+)"", 2, resourceId))), dynamic(null)))#(lf)        | extend resourceType = (iff(type == ""microsoft.security/assessments"", tolower(coalesce(properties.resourceDetails.ResourceType, properties.resourceDetails.resourceType)), dynamic(null)))#(lf)        | extend riskLevelText = (iff(type == ""microsoft.security/assessments"", tostring(properties.risk.level), dynamic(null)))#(lf)        | extend severity = (iff(type == ""microsoft.security/assessments"", tostring(properties.metadata.severity), dynamic(null)))       #(lf)        | extend isContextualRisk = (iff(type == ""microsoft.security/assessments"", iff(isnull(properties.risk.isContextualRisk), false, tobool(properties.risk.isContextualRisk)), dynamic(null)))#(lf)        | extend riskLevel = (iff(type == ""microsoft.security/assessments"", case(riskLevelText =~ ""Critical"", 4,riskLevelText =~ ""High"", 3,riskLevelText =~ ""Medium"", 2,riskLevelText =~ ""Low"", 1,0), dynamic(null))) #(lf)        | extend riskLevel = iff(isContextualRisk, riskLevel, 0)#(lf)        | extend riskFactors = (iff(type == ""microsoft.security/assessments"", iff(isnull(properties.risk.riskFactors), dynamic([]), properties.risk.riskFactors), dynamic(null))) #(lf)        | extend attackPaths = array_length((iff(type == ""microsoft.security/assessments"", iff(isnull(properties.risk.attackPathsReferences), dynamic([]), properties.risk.attackPathsReferences), dynamic(null))))           #(lf)        | extend displayName = (iff(type == ""microsoft.security/assessments"", tostring(properties.displayName), dynamic(null)))#(lf)        | extend statusCause = (iff(type == ""microsoft.security/assessments"", tostring(properties.status.cause), dynamic(null)))#(lf)        | extend isExempt = (iff(type == ""microsoft.security/assessments"", iff(statusCause == ""Exempt"", tobool(1), tobool(0)), dynamic(null)))#(lf)        | extend statusChangeDate = tostring((iff(type == ""microsoft.security/assessments"", todatetime(properties.status.statusChangeDate), dynamic(null))))#(lf)        | extend isSubAssessment = isnotempty((iff(type == ""microsoft.security/assessments"", todynamic(properties.additionalData), dynamic(null)))['subAssessmentsLink'])#(lf)        | extend isPreview = ((iff(type == ""microsoft.security/assessments"", iff(isnull(properties.metadata.preview), tobool(0), tobool(properties.metadata.preview)), dynamic(null))))#(lf)        | extend connector = tolower((iff(type == ""microsoft.security/assessments"", extract(""(.*/providers/Microsoft.Security/security[Cc]onnectors/[^/]*)"", 1, id), dynamic(null))))#(lf)        | extend awsAccount = (iff(type == ""microsoft.security/assessments"", iff(((type == ""microsoft.security/assessments"" and (source =~ ""aws"" and isnotempty(tostring(properties.resourceDetails.ConnectorId))))), connector, dynamic(null)), dynamic(null)))#(lf)        | extend gcpProject = (iff(type == ""microsoft.security/assessments"", iff(((type == ""microsoft.security/assessments"" and (source =~ ""gcp"" and isnotempty(tostring(properties.resourceDetails.ConnectorId))))), connector, dynamic(null)), dynamic(null)))#(lf)        | extend accountName = iff(isnotempty(awsAccount), awsAccount, iff(isnotempty(gcpProject), gcpProject, dynamic(null)))#(lf)        | extend maturityLevel = (iff(type == ""microsoft.security/assessments"", case(isnull(properties.metadata.preview), ""GA"",tobool(properties.metadata.preview), ""Preview"",""GA""), dynamic(null)))#(lf)        | project assessmentId, subscriptionId, maturityLevel,statusChangeDate,isExempt,riskLevel,isContextualRisk,riskFactors,attackPaths,statusCode,displayName,resourceId,assessmentKey,resourceType,resourceName,severity,assessmentTypeSkimmed,isSubAssessment,isPreview#(lf)            | join kind=leftouter (securityresources#(lf)                | where type == 'microsoft.security/assessments/governanceassignments'#(lf)                | extend assignedResourceId = tolower((iff(type == ""microsoft.security/assessments/governanceassignments"", tostring(properties.assignedResourceId), dynamic(null))))#(lf)                | extend dueDate = (iff(type == ""microsoft.security/assessments/governanceassignments"", todatetime(properties.remediationDueDate), dynamic(null)))#(lf)                | extend owner = (iff(type == ""microsoft.security/assessments/governanceassignments"", iff(isempty(tostring(properties.owner)), ""unspecified"", tostring(properties.owner)), dynamic(null)))#(lf)                | extend governanceStatus = (iff(type == ""microsoft.security/assessments/governanceassignments"", case(isnull(todatetime(properties.remediationDueDate)), ""NoDueDate"",todatetime(properties.remediationDueDate) >= bin(now(), 1d), ""OnTime"",""Overdue""), dynamic(null)))#(lf)                | project assignedResourceId, dueDate, owner, governanceStatus) on $left.assessmentId == $right.assignedResourceId#(lf)            | extend completionStatusNumber = case(statusCode == ""Healthy"", 1,governanceStatus == ""Overdue"", 5,governanceStatus == ""OnTime"", 4,statusCode == ""Unhealthy"", 3,isExempt, 7,1)#(lf)                | extend completionStatus = case(completionStatusNumber == 5, ""Overdue"",completionStatusNumber == 4, ""OnTime"",completionStatusNumber == 3, ""Unassigned"",completionStatusNumber == 7, ""Exempted"",""Completed"")#(lf)            | where completionStatus in~ (""OnTime"",""Overdue"",""Unassigned"")#(lf)            | project-away assignedResourceId#(lf)                       | extend riskFactorsLength = array_length(riskFactors)#(lf)            | extend dd = strcat(9-riskLevel, iff(riskFactors has_cs ""Critical Resource"", 0, 1), 9-riskFactorsLength, displayName)#(lf)            | sort by dd asc", "Tenant", null, null, [resultTruncated = false]),
  #"Changed column type" = Table.TransformColumnTypes(Source, {{"statusChangeDate", type datetimezone}}),
  #"Removed columns" = Table.RemoveColumns(#"Changed column type", {"riskFactors"}),
  #"Transform columns" = Table.TransformColumnTypes(#"Removed columns", {{"assessmentId", type text}, {"maturityLevel", type text}, {"isExempt", type text}, {"riskLevel", type text}, {"isContextualRisk", type text}, {"attackPaths", type text}, {"statusCode", type text}, {"displayName", type text}, {"resourceId", type text}, {"assessmentKey", type text}, {"resourceType", type text}, {"resourceName", type text}, {"severity", type text}, {"assessmentTypeSkimmed", type text}, {"isSubAssessment", type text}, {"isPreview", type text}, {"dueDate", type text}, {"owner", type text}, {"governanceStatus", type text}, {"completionStatusNumber", type text}, {"completionStatus", type text}, {"riskFactorsLength", type text}, {"dd", type text}}),
  #"Replace errors" = Table.ReplaceErrorValues(#"Transform columns", {{"assessmentId", null}, {"maturityLevel", null}, {"isExempt", null}, {"riskLevel", null}, {"isContextualRisk", null}, {"attackPaths", null}, {"statusCode", null}, {"displayName", null}, {"resourceId", null}, {"assessmentKey", null}, {"resourceType", null}, {"resourceName", null}, {"severity", null}, {"assessmentTypeSkimmed", null}, {"isSubAssessment", null}, {"isPreview", null}, {"dueDate", null}, {"owner", null}, {"governanceStatus", null}, {"completionStatusNumber", null}, {"completionStatus", null}, {"riskFactorsLength", null}, {"dd", null}})
in
  #"Replace errors"


//////////////////////////////
// Security Recommendations Risk Factors 
//////////////////////////////

let
  Source = AzureResourceGraph.Query("securityresources #(lf)        | where type =~ ""microsoft.security/assessments""#(lf)        | extend assessmentType = (#(lf)                iff(type == ""microsoft.security/assessments"", tostring(properties.metadata.assessmentType), dynamic(null)))#(lf)        | where ((type == ""microsoft.security/assessments"" and (assessmentType in~ (""BuiltIn"", ""CustomerManaged""))))#(lf)        | extend assessmentTypeSkimmed = (iff(type == ""microsoft.security/assessments"", case(tostring(properties.metadata.assessmentType) == ""BuiltIn"", ""BuiltIn"", tostring(properties.metadata.assessmentType) == ""BuiltInPolicy"", ""BuiltIn"", tostring(properties.metadata.assessmentType) == ""CustomPolicy"", ""Custom"", tostring(properties.metadata.assessmentType) == ""CustomerManaged"", ""Custom"", tostring(properties.metadata.assessmentType) == ""ManualCustomPolicy"", ""Custom"", tostring(properties.metadata.assessmentType) == ""ManualBuiltInPolicy"", ""BuiltIn"", dynamic(null)), dynamic(null)))#(lf)        | extend assessmentId = tolower(id)#(lf)        | extend assessmentKey = (iff(type == ""microsoft.security/assessments"", name, dynamic(null)))#(lf)        | extend source = (iff(type == ""microsoft.security/assessments"", trim(' ', tolower(coalesce(tostring(properties.resourceDetails.Source), tostring(properties.resourceDetails.source)))), dynamic(null)))#(lf)        | extend statusCode = (iff(type == ""microsoft.security/assessments"", tostring(properties.status.code), dynamic(null)))#(lf)        | extend resourceId = (iff(type == ""microsoft.security/assessments"", tolower(trim("" "", tostring(case(source =~ ""azure"", coalesce(properties.resourceDetails.Id, properties.resourceDetails.id),((type == ""microsoft.security/assessments"" and (source =~ ""aws"" and isnotempty(tostring(properties.resourceDetails.ConnectorId))))), coalesce(properties.resourceDetails.Id, properties.resourceDetails.id),((type == ""microsoft.security/assessments"" and (source =~ ""gcp"" and isnotempty(tostring(properties.resourceDetails.ConnectorId))))), coalesce(properties.resourceDetails.Id, properties.resourceDetails.id),source =~ ""aws"", properties.resourceDetails.AzureResourceId,#(lf)            source =~ ""gcp"", properties.resourceDetails.AzureResourceId,#(lf)            extract(""^(?i)(.+)/providers/Microsoft.Security/assessments/.+$"",1,id))))), dynamic(null)))#(lf)        | extend resourceName = (iff(type == ""microsoft.security/assessments"", tostring(coalesce(properties.resourceDetails.ResourceName, properties.resourceDetails.resourceName, properties.additionalData.CloudNativeResourceName, properties.additionalData.ResourceName, properties.additionalData.resourceName, split(resourceId, '/')[-1], extract(@""(.+)/(.+)"", 2, resourceId))), dynamic(null)))#(lf)        | extend resourceType = (iff(type == ""microsoft.security/assessments"", tolower(coalesce(properties.resourceDetails.ResourceType, properties.resourceDetails.resourceType)), dynamic(null)))#(lf)        | extend riskLevelText = (iff(type == ""microsoft.security/assessments"", tostring(properties.risk.level), dynamic(null)))#(lf)        | extend severity = (iff(type == ""microsoft.security/assessments"", tostring(properties.metadata.severity), dynamic(null)))       #(lf)        | extend isContextualRisk = (iff(type == ""microsoft.security/assessments"", iff(isnull(properties.risk.isContextualRisk), false, tobool(properties.risk.isContextualRisk)), dynamic(null)))#(lf)        | extend riskLevel = (iff(type == ""microsoft.security/assessments"", case(riskLevelText =~ ""Critical"", 4,riskLevelText =~ ""High"", 3,riskLevelText =~ ""Medium"", 2,riskLevelText =~ ""Low"", 1,0), dynamic(null))) #(lf)        | extend riskLevel = iff(isContextualRisk, riskLevel, 0)#(lf)        | extend riskFactors = (iff(type == ""microsoft.security/assessments"", iff(isnull(properties.risk.riskFactors), dynamic([]), properties.risk.riskFactors), dynamic(null))) #(lf)        | extend attackPaths = array_length((iff(type == ""microsoft.security/assessments"", iff(isnull(properties.risk.attackPathsReferences), dynamic([]), properties.risk.attackPathsReferences), dynamic(null))))           #(lf)        | extend displayName = (iff(type == ""microsoft.security/assessments"", tostring(properties.displayName), dynamic(null)))#(lf)        | extend statusCause = (iff(type == ""microsoft.security/assessments"", tostring(properties.status.cause), dynamic(null)))#(lf)        | extend isExempt = (iff(type == ""microsoft.security/assessments"", iff(statusCause == ""Exempt"", tobool(1), tobool(0)), dynamic(null)))#(lf)        | extend statusChangeDate = tostring((iff(type == ""microsoft.security/assessments"", todatetime(properties.status.statusChangeDate), dynamic(null))))#(lf)        | extend isSubAssessment = isnotempty((iff(type == ""microsoft.security/assessments"", todynamic(properties.additionalData), dynamic(null)))['subAssessmentsLink'])#(lf)        | extend isPreview = ((iff(type == ""microsoft.security/assessments"", iff(isnull(properties.metadata.preview), tobool(0), tobool(properties.metadata.preview)), dynamic(null))))#(lf)        | extend connector = tolower((iff(type == ""microsoft.security/assessments"", extract(""(.*/providers/Microsoft.Security/security[Cc]onnectors/[^/]*)"", 1, id), dynamic(null))))#(lf)        | extend awsAccount = (iff(type == ""microsoft.security/assessments"", iff(((type == ""microsoft.security/assessments"" and (source =~ ""aws"" and isnotempty(tostring(properties.resourceDetails.ConnectorId))))), connector, dynamic(null)), dynamic(null)))#(lf)        | extend gcpProject = (iff(type == ""microsoft.security/assessments"", iff(((type == ""microsoft.security/assessments"" and (source =~ ""gcp"" and isnotempty(tostring(properties.resourceDetails.ConnectorId))))), connector, dynamic(null)), dynamic(null)))#(lf)        | extend accountName = iff(isnotempty(awsAccount), awsAccount, iff(isnotempty(gcpProject), gcpProject, dynamic(null)))#(lf)        | extend maturityLevel = (iff(type == ""microsoft.security/assessments"", case(isnull(properties.metadata.preview), ""GA"",tobool(properties.metadata.preview), ""Preview"",""GA""), dynamic(null)))#(lf)        | project assessmentId,maturityLevel,statusChangeDate,isExempt,riskLevel,isContextualRisk,riskFactors,attackPaths,statusCode,displayName,resourceId,assessmentKey,resourceType,resourceName,severity,assessmentTypeSkimmed,isSubAssessment,isPreview#(lf)            | join kind=leftouter (securityresources#(lf)                | where type == 'microsoft.security/assessments/governanceassignments'#(lf)                | extend assignedResourceId = tolower((iff(type == ""microsoft.security/assessments/governanceassignments"", tostring(properties.assignedResourceId), dynamic(null))))#(lf)                | extend dueDate = (iff(type == ""microsoft.security/assessments/governanceassignments"", todatetime(properties.remediationDueDate), dynamic(null)))#(lf)                | extend owner = (iff(type == ""microsoft.security/assessments/governanceassignments"", iff(isempty(tostring(properties.owner)), ""unspecified"", tostring(properties.owner)), dynamic(null)))#(lf)                | extend governanceStatus = (iff(type == ""microsoft.security/assessments/governanceassignments"", case(isnull(todatetime(properties.remediationDueDate)), ""NoDueDate"",todatetime(properties.remediationDueDate) >= bin(now(), 1d), ""OnTime"",""Overdue""), dynamic(null)))#(lf)                | project assignedResourceId, dueDate, owner, governanceStatus) on $left.assessmentId == $right.assignedResourceId#(lf)            | extend completionStatusNumber = case(statusCode == ""Healthy"", 1,governanceStatus == ""Overdue"", 5,governanceStatus == ""OnTime"", 4,statusCode == ""Unhealthy"", 3,isExempt, 7,1)#(lf)                | extend completionStatus = case(completionStatusNumber == 5, ""Overdue"",completionStatusNumber == 4, ""OnTime"",completionStatusNumber == 3, ""Unassigned"",completionStatusNumber == 7, ""Exempted"",""Completed"")#(lf)            | where completionStatus in~ (""OnTime"",""Overdue"",""Unassigned"")#(lf)            | project-away assignedResourceId#(lf)                       | extend riskFactorsLength = array_length(riskFactors)#(lf)            | extend dd = strcat(9-riskLevel, iff(riskFactors has_cs ""Critical Resource"", 0, 1), 9-riskFactorsLength, displayName)#(lf)            | sort by dd asc", "Tenant", null, null, [resultTruncated = false]),
  #"Changed column type" = Table.TransformColumnTypes(Source, {{"statusChangeDate", type datetimezone}}),
  #"Removed other columns" = Table.SelectColumns(#"Changed column type", {"assessmentId", "riskFactors"}),
  #"Expanded riskFactors" = Table.ExpandListColumn(#"Removed other columns", "riskFactors"),
  #"Transform columns" = Table.TransformColumnTypes(#"Expanded riskFactors", {{"assessmentId", type text}, {"riskFactors", type text}}),
  #"Replace errors" = Table.ReplaceErrorValues(#"Transform columns", {{"assessmentId", null}, {"riskFactors", null}})
in
  #"Replace errors"
